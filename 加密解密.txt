	public function passdeom()
	{
		
		
		$str = "字串：".'admin';echo "{$str}<br>";
		$key = "密鑰：".'9skin';echo "{$key}<br>";
		$app = $this->allfun->addpass($str,'E',$key);
		echo "加密：".$app."<br>"; //加密
		echo  "解密".$this->allfun->addpass($app,'D',$key); //解密
	}
	
	
	
	//加密解密
	public function authcode($string, $operation = 'DECODE', $key = '', $expiry = 0) 
	{  
		// 動態密匙長度，相同的明文會生成不同密文就是依靠動態密匙  
		$ckey_length = 4;  
		  
		// 密匙  
		$key = md5($key ? $key : $GLOBALS['discuz_auth_key']);  
		  
		// 密匙a會參與加解密  
		$keya = md5(substr($key, 0, 16));  
		// 密匙b會用來做資料完整性驗證  
		$keyb = md5(substr($key, 16, 16));  
		// 密匙c用於變化生成的密文  
		$keyc = $ckey_length ? ($operation == 'DECODE' ? substr($string, 0, $ckey_length): substr(md5(microtime()), -$ckey_length)) : '';  
		// 參與運算的密匙  
		$cryptkey = $keya.md5($keya.$keyc);  
		$key_length = strlen($cryptkey);  
		// 明文，前10位用來保存時間戳記，解密時驗證資料有效性，10到26位用來保存$keyb(密匙b)，
		//解密時會通過這個密匙驗證資料完整性  
		// 如果是解碼的話，會從第$ckey_length位開始，因為密文前$ckey_length位元保存 動態密匙，以保證解密正確  
		$string = $operation == 'DECODE' ? base64_decode(substr($string, $ckey_length)) :  sprintf('%010d', $expiry ? $expiry + time() : 0).substr(md5($string.$keyb), 0, 16).$string;  
		$string_length = strlen($string);  
		$result = '';  
		$box = range(0, 255);  
		$rndkey = array();  
		// 產生密匙簿  
		for($i = 0; $i <= 255; $i++) {  
			$rndkey[$i] = ord($cryptkey[$i % $key_length]);  
		}  
		// 用固定的演算法，打亂密匙簿，增加隨機性，好像很複雜，實際上對並不會增加密文的強度  
		for($j = $i = 0; $i < 256; $i++) {  
			$j = ($j + $box[$i] + $rndkey[$i]) % 256;  
			$tmp = $box[$i];  
			$box[$i] = $box[$j];  
			$box[$j] = $tmp;  
		}  
		// 核心加解密部分  
		for($a = $j = $i = 0; $i < $string_length; $i++) {  
			$a = ($a + 1) % 256;  
			$j = ($j + $box[$a]) % 256;  
			$tmp = $box[$a];  
			$box[$a] = $box[$j];  
			$box[$j] = $tmp;  
			// 從密匙簿得出密匙進行異或，再轉成字元  
			$result .= chr(ord($string[$i]) ^ ($box[($box[$a] + $box[$j]) % 256]));  
		}  
		if($operation == 'DECODE') { 
			// 驗證資料有效性，請看未加密明文的格式  
			if((substr($result, 0, 10) == 0 || substr($result, 0, 10) - time() > 0) && substr($result, 10, 16) == substr(md5(substr($result, 26).$keyb), 0, 16))
			{  
				return substr($result, 26);  
			} else {  
				return '';  
			}  
		} else {  
			// 把動態密匙保存在密文裡，這也是為什麼同樣的明文，生產不同密文後能解密的原因  
			// 因為加密後的密文可能是一些特殊字元，複製過程可能會丟失，所以用base64編碼  
			return $keyc.str_replace('=', '', base64_encode($result));  
		}  
		
		
		/*
		$str = 'abcdef';
		$key = 'www.helloweba.net';
		echo authcode($str,'ENCODE',$key,0); //加密
		$str = '56f4yER1DI2WTzWMqsfPpS9hwyoJnFP2MpC8SOhRrxO7BOk';
		echo authcode($str,'DECODE',$key,0); //解密
		*/
	}
	
	//加密$class='E'為加密，其他為解密
	public function addpass($string ,$class = 'E' ,  $key = '9skin')
	{
		
		if($class == 'E')
		{
			
			while(TRUE)
			{
				$add    = addslashes($this->authcode($string,'ENCODE',$key,0));//執行加密動作
				if( ! $this->checkIsSpecialString($add))break;//判斷是否有特殊符號
			}
			
			return $add;
		}else{
			
			$arr    = $this->authcode($string,'DECODE',$key,0); //解密
			return $arr;
		}
	}